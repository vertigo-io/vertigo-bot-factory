package io.vertigo.chatbot.commons.dao;

import javax.inject.Inject;

import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Node;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.entitystore.EntityStoreManager;
import io.vertigo.datastore.impl.dao.DAO;
import io.vertigo.datastore.impl.dao.StoreServices;
import io.vertigo.datamodel.smarttype.SmartTypeManager;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.chatbot.commons.domain.SavedTraining;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
public final class SavedTrainingDAO extends DAO<SavedTraining, java.lang.Long> implements StoreServices {

	/**
	 * Contructeur.
	 * @param entityStoreManager Manager de persistance
	 * @param taskManager Manager de Task
	 * @param smartTypeManager SmartTypeManager
	 */
	@Inject
	public SavedTrainingDAO(final EntityStoreManager entityStoreManager, final TaskManager taskManager, final SmartTypeManager smartTypeManager) {
		super(SavedTraining.class, entityStoreManager, taskManager, smartTypeManager);
	}


	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetSavedTrainingByBotIdAndWithDateAfter.
	 * @param botId Long
	 * @param fromDate LocalDate
	 * @return DtList de SavedTraining tra
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetSavedTrainingByBotIdAndWithDateAfter",
			request = """
			select savtra.*
            from saved_training savtra
            where savtra.bot_id = #botId# and savtra.creation_time >= #fromDate# order by savtra.creation_time desc""",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtSavedTraining", name = "tra")
	public io.vertigo.datamodel.data.model.DtList<io.vertigo.chatbot.commons.domain.SavedTraining> getSavedTrainingByBotIdAndWithDateAfter(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "fromDate", smartType = "STyLocaldate") final java.time.LocalDate fromDate) {
		final Task task = createTaskBuilder("TkGetSavedTrainingByBotIdAndWithDateAfter")
				.addValue("botId", botId)
				.addValue("fromDate", fromDate)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetSavedTrainingByBotIdAndWithDateBefore.
	 * @param botId Long
	 * @param toDate LocalDate
	 * @return DtList de SavedTraining tra
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetSavedTrainingByBotIdAndWithDateBefore",
			request = """
			select savtra.*
            from saved_training savtra
            where savtra.bot_id = #botId# and savtra.creation_time <= #toDate# order by savtra.creation_time desc""",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtSavedTraining", name = "tra")
	public io.vertigo.datamodel.data.model.DtList<io.vertigo.chatbot.commons.domain.SavedTraining> getSavedTrainingByBotIdAndWithDateBefore(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "toDate", smartType = "STyLocaldate") final java.time.LocalDate toDate) {
		final Task task = createTaskBuilder("TkGetSavedTrainingByBotIdAndWithDateBefore")
				.addValue("botId", botId)
				.addValue("toDate", toDate)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetSavedTrainingByBotIdAndWithDateBetween.
	 * @param botId Long
	 * @param fromDate LocalDate
	 * @param toDate LocalDate
	 * @return DtList de SavedTraining tra
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetSavedTrainingByBotIdAndWithDateBetween",
			request = """
			select savtra.*
            from saved_training savtra
            where savtra.bot_id = #botId# and savtra.creation_time between #fromDate# and #toDate# order by savtra.creation_time desc""",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtSavedTraining", name = "tra")
	public io.vertigo.datamodel.data.model.DtList<io.vertigo.chatbot.commons.domain.SavedTraining> getSavedTrainingByBotIdAndWithDateBetween(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "fromDate", smartType = "STyLocaldate") final java.time.LocalDate fromDate, @io.vertigo.datamodel.task.proxy.TaskInput(name = "toDate", smartType = "STyLocaldate") final java.time.LocalDate toDate) {
		final Task task = createTaskBuilder("TkGetSavedTrainingByBotIdAndWithDateBetween")
				.addValue("botId", botId)
				.addValue("fromDate", fromDate)
				.addValue("toDate", toDate)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

}
