package io.vertigo.chatbot.commons.dao.topic;

import javax.inject.Inject;

import java.util.Optional;
import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Node;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.entitystore.EntityStoreManager;
import io.vertigo.datastore.impl.dao.DAO;
import io.vertigo.datastore.impl.dao.StoreServices;
import io.vertigo.datamodel.smarttype.SmartTypeManager;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.chatbot.commons.domain.topic.TopicCategory;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
public final class TopicCategoryDAO extends DAO<TopicCategory, java.lang.Long> implements StoreServices {

	/**
	 * Contructeur.
	 * @param entityStoreManager Manager de persistance
	 * @param taskManager Manager de Task
	 * @param smartTypeManager SmartTypeManager
	 */
	@Inject
	public TopicCategoryDAO(final EntityStoreManager entityStoreManager, final TaskManager taskManager, final SmartTypeManager smartTypeManager) {
		super(TopicCategory.class, entityStoreManager, taskManager, smartTypeManager);
	}


	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetAllCategoriesByBotId.
	 * @param botId Long
	 * @param isEnabled Boolean
	 * @param isTechnical Boolean
	 * @return DtList de TopicCategory tpcs
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetAllCategoriesByBotId",
			request = "select tpc.*\n" + 
 " 			from topic_category tpc\n" + 
 " 			where tpc.bot_id = #botId#\n" + 
 " 			<% if (isEnabled != null){ %>\n" + 
 " 				and tpc.is_enabled = #isEnabled#\n" + 
 " 			<% } %>\n" + 
 " 			<% if (isTechnical != null){ %>\n" + 
 " 				and tpc.is_technical = #isTechnical#\n" + 
 " 			<% } %>\n" + 
 " 			order by tpc.label",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtTopicCategory", name = "tpcs")
	public io.vertigo.datamodel.structure.model.DtList<io.vertigo.chatbot.commons.domain.topic.TopicCategory> getAllCategoriesByBotId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "isEnabled", smartType = "STyYesNo") final Optional<Boolean> isEnabled, @io.vertigo.datamodel.task.proxy.TaskInput(name = "isTechnical", smartType = "STyYesNo") final Optional<Boolean> isTechnical) {
		final Task task = createTaskBuilder("TkGetAllCategoriesByBotId")
				.addValue("botId", botId)
				.addValue("isEnabled", isEnabled.orElse(null))
				.addValue("isTechnical", isTechnical.orElse(null))
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

}
