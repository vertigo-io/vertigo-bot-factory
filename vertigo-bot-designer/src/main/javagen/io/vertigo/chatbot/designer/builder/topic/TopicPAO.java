package io.vertigo.chatbot.designer.builder.topic;

import javax.inject.Inject;

import java.util.Optional;
import io.vertigo.core.node.Node;
import io.vertigo.core.lang.Assertion;
import io.vertigo.core.lang.Generated;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.impl.dao.StoreServices;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class TopicPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public TopicPAO(final TaskManager taskManager) {
		Assertion.check().isNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkCheckUnicityTopicCode.
	 * @param botId Long
	 * @param code String
	 * @param topId Long
	 * @return Boolean exist
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkCheckUnicityTopicCode",
			request = "select exists(\n" + 
 " 					select 1\n" + 
 " 					from topic top \n" + 
 " 					where top.bot_id = #botId# and top.code = #code#\n" + 
 " 					<%if (topId != null) { %>\n" + 
 " 						and top.top_id != #topId#\n" + 
 " 					<% } %>\n" + 
 " 				)",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyYesNo", name = "exist")
	public Boolean checkUnicityTopicCode(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "code", smartType = "STyLabel") final String code, @io.vertigo.datamodel.task.proxy.TaskInput(name = "topId", smartType = "STyId") final Optional<Long> topId) {
		final Task task = createTaskBuilder("TkCheckUnicityTopicCode")
				.addValue("botId", botId)
				.addValue("code", code)
				.addValue("topId", topId.orElse(null))
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetAllTopicsIhmFromBot.
	 * @param botId Long
	 * @param ktoCds List de String
	 * @param locale String
	 * @return DtList de TopicIhm topicIHM
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetAllTopicsIhmFromBot",
			request = "SELECT 	top.top_id,\n" + 
 " 					top.title,\n" + 
 " 					top.code,\n" + 
 " 					smt.smt_id,\n" + 
 " 					sin.sin_id,\n" + 
 " 					top.is_enabled,\n" + 
 " 					CASE #locale#\n" + 
 " 						WHEN 'fr_FR' THEN tto.label_fr\n" + 
 " 						ELSE tto.label\n" + 
 " 					END as type,\n" + 
 " 					top.tto_cd,\n" + 
 " 					tpc.label as cat_label,\n" + 
 " 					string_agg(tpl.label, ',') as labels\n" + 
 " 			from topic top \n" + 
 " 			left join small_talk smt on smt.top_id = top.top_id\n" + 
 " 			left join script_intention sin on sin.top_id = top.top_id\n" + 
 " 			join type_topic tto on top.tto_cd = tto.tto_cd\n" + 
 " 			join topic_category tpc on (tpc.top_cat_id = top.top_cat_id)\n" + 
 " 			left join topic_topic_label ttl on (ttl.top_id = top.top_id)\n" + 
 " 			left join topic_label tpl on (tpl.label_id = ttl.label_id)\n" + 
 " 			where top.bot_id = #botId#\n" + 
 " 			<% if (ktoCds != null){ %>\n" + 
 " 				and top.kto_cd in (#ktoCds.rownum#)\n" + 
 " 			<% } %>\n" + 
 " 			group by top.top_id,\n" + 
 " 					top.title,\n" + 
 " 					top.code,\n" + 
 " 					smt.smt_id,\n" + 
 " 					sin.sin_id,\n" + 
 " 					top.is_enabled,\n" + 
 " 					tto.label,\n" + 
 " 					tto.label_fr,\n" + 
 " 					top.tto_cd,\n" + 
 " 					tpc.label",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtTopicIhm", name = "topicIHM")
	public io.vertigo.datamodel.structure.model.DtList<io.vertigo.chatbot.commons.domain.topic.TopicIhm> getAllTopicsIhmFromBot(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "ktoCds", smartType = "STyCode") final java.util.List<String> ktoCds, @io.vertigo.datamodel.task.proxy.TaskInput(name = "locale", smartType = "STyCode") final String locale) {
		final Task task = createTaskBuilder("TkGetAllTopicsIhmFromBot")
				.addValue("botId", botId)
				.addValue("ktoCds", ktoCds)
				.addValue("locale", locale)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetTopicIhmById.
	 * @param topId Long
	 * @return TopicIhm topicIHM
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetTopicIhmById",
			request = "SELECT 	top.top_id,\n" + 
 " 					top.title,\n" + 
 " 					top.code,\n" + 
 " 					smt.smt_id,\n" + 
 " 					sin.sin_id,\n" + 
 " 					top.is_enabled,\n" + 
 " 					tto.label as type,\n" + 
 " 					top.tto_cd,\n" + 
 " 					tpc.label as cat_label,\n" + 
 " 					string_agg(tpl.label, ',') as labels\n" + 
 " 			from topic top \n" + 
 " 			left join small_talk smt on smt.top_id = top.top_id\n" + 
 " 			left join script_intention sin on sin.top_id = top.top_id\n" + 
 " 			join type_topic tto on top.tto_cd = tto.tto_cd\n" + 
 " 			join topic_category tpc on (tpc.top_cat_id = top.top_cat_id)\n" + 
 " 			left join topic_topic_label ttl on (ttl.top_id = top.top_id)\n" + 
 " 			left join topic_label tpl on (tpl.label_id = ttl.label_id)\n" + 
 " 			where top.top_id = #topId#\n" + 
 " 			group by top.top_id,\n" + 
 " 					top.title,\n" + 
 " 					top.code,\n" + 
 " 					smt.smt_id,\n" + 
 " 					sin.sin_id,\n" + 
 " 					top.is_enabled,\n" + 
 " 					tto.label ,\n" + 
 " 					top.tto_cd,\n" + 
 " 					tpc.label\n" + 
 " 			\n" + 
 " 			LIMIT 1",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtTopicIhm", name = "topicIHM")
	public io.vertigo.chatbot.commons.domain.topic.TopicIhm getTopicIhmById(@io.vertigo.datamodel.task.proxy.TaskInput(name = "topId", smartType = "STyId") final Long topId) {
		final Task task = createTaskBuilder("TkGetTopicIhmById")
				.addValue("topId", topId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkRemoveAllNluTrainingSentenceByBotId.
	 * @param botId Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkRemoveAllNluTrainingSentenceByBotId",
			request = "delete from nlu_training_sentence nts\n" + 
 " 			using topic top\n" + 
 " 			where nts.top_id = top.top_id and top.bot_id = #botId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void removeAllNluTrainingSentenceByBotId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId) {
		final Task task = createTaskBuilder("TkRemoveAllNluTrainingSentenceByBotId")
				.addValue("botId", botId)
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TkRemoveAllTopicsFromBot.
	 * @param botId Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkRemoveAllTopicsFromBot",
			request = "delete from topic top \n" + 
 " 			where top.bot_id = #botId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void removeAllTopicsFromBot(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId) {
		final Task task = createTaskBuilder("TkRemoveAllTopicsFromBot")
				.addValue("botId", botId)
				.build();
		getTaskManager().execute(task);
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
