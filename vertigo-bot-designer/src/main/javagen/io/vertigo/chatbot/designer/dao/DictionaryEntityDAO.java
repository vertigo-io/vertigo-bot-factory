package io.vertigo.chatbot.designer.dao;

import javax.inject.Inject;

import java.util.Optional;
import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Node;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.entitystore.EntityStoreManager;
import io.vertigo.datastore.impl.dao.DAO;
import io.vertigo.datastore.impl.dao.StoreServices;
import io.vertigo.datamodel.smarttype.SmartTypeManager;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.chatbot.designer.domain.DictionaryEntity;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
public final class DictionaryEntityDAO extends DAO<DictionaryEntity, java.lang.Long> implements StoreServices {

	/**
	 * Contructeur.
	 * @param entityStoreManager Manager de persistance
	 * @param taskManager Manager de Task
	 * @param smartTypeManager SmartTypeManager
	 */
	@Inject
	public DictionaryEntityDAO(final EntityStoreManager entityStoreManager, final TaskManager taskManager, final SmartTypeManager smartTypeManager) {
		super(DictionaryEntity.class, entityStoreManager, taskManager, smartTypeManager);
	}


	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetDictionaryEntityBySynonymLabelAndBotId.
	 * @param botId Long
	 * @param label String
	 * @return Option de DictionaryEntity dictionaryEntity
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetDictionaryEntityBySynonymLabelAndBotId",
			request = "SELECT 	ent.*\n" + 
 " 				from dictionary_entity ent\n" + 
 " 				join synonym syn on syn.dic_ent_id = ent.dic_ent_id\n" + 
 " 				where ent.bot_id = #botId#\n" + 
 " 				and syn.label = #label#\n" + 
 " 				LIMIT 1",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtDictionaryEntity")
	public Optional<io.vertigo.chatbot.designer.domain.DictionaryEntity> getDictionaryEntityBySynonymLabelAndBotId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "label", smartType = "STyLabel") final String label) {
		final Task task = createTaskBuilder("TkGetDictionaryEntityBySynonymLabelAndBotId")
				.addValue("botId", botId)
				.addValue("label", label)
				.build();
		return Optional.ofNullable((io.vertigo.chatbot.designer.domain.DictionaryEntity) getTaskManager()
				.execute(task)
				.getResult());
	}

}
