package io.vertigo.chatbot.designer.builder.questionAnswer;

import javax.inject.Inject;

import io.vertigo.core.node.Node;
import io.vertigo.core.lang.Assertion;
import io.vertigo.core.lang.Generated;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.impl.dao.StoreServices;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class QuestionAnswerPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public QuestionAnswerPAO(final TaskManager taskManager) {
		Assertion.check().isNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetAllQuestionAnswerIhmFromBot.
	 * @param botId Long
	 * @return DtList de QuestionAnswerIhm questionanswerIHM
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetAllQuestionAnswerIhmFromBot",
			request = "SELECT 	qa.qa_id,\n" + 
 " 					qa.question,\n" + 
 " 					qa.answer,\n" + 
 " 					qa.is_enabled,\n" + 
 " 					qa.code,\n" + 
 " 					qac.qa_cat_id as cat_id,\n" + 
 " 					qac.label as cat_label\n" + 
 " 			from question_answer qa\n" + 
 " 			join question_answer_category qac on (qac.qa_cat_id = qa.qa_cat_id)\n" + 
 " 			where qa.bot_id = #botId#\n" + 
 " 			order by qac.label,\n" + 
 "                     qa.question",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtQuestionAnswerIhm", name = "questionanswerIHM")
	public io.vertigo.datamodel.structure.model.DtList<io.vertigo.chatbot.commons.domain.questionanswer.QuestionAnswerIhm> getAllQuestionAnswerIhmFromBot(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId) {
		final Task task = createTaskBuilder("TkGetAllQuestionAnswerIhmFromBot")
				.addValue("botId", botId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetQuestionAnswerIhmById.
	 * @param qaId Long
	 * @return QuestionAnswerIhm questionAnswerIHM
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetQuestionAnswerIhmById",
			request = "SELECT 	qa.qa_id,\n" + 
 "                     qa.question,\n" + 
 "                     qa.answer,\n" + 
 "                     qa.is_enabled,\n" + 
 "                     qa.code,\n" + 
 "                     qac.qa_cat_id as cat_id,\n" + 
 "                     qac.label as cat_label\n" + 
 " 			from question_answer qa\n" + 
 "             join question_answer_category qac on (qac.qa_cat_id = qa.qa_cat_id)\n" + 
 " 			where qa.qa_id = #qaId#\n" + 
 " \n" + 
 " 			LIMIT 1",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtQuestionAnswerIhm", name = "questionAnswerIHM")
	public io.vertigo.chatbot.commons.domain.questionanswer.QuestionAnswerIhm getQuestionAnswerIhmById(@io.vertigo.datamodel.task.proxy.TaskInput(name = "qaId", smartType = "STyId") final Long qaId) {
		final Task task = createTaskBuilder("TkGetQuestionAnswerIhmById")
				.addValue("qaId", qaId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
