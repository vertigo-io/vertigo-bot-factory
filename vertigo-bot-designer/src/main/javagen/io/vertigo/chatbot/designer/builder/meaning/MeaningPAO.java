package io.vertigo.chatbot.designer.builder.meaning;

import javax.inject.Inject;

import io.vertigo.core.node.Node;
import io.vertigo.core.lang.Assertion;
import io.vertigo.core.lang.Generated;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.impl.dao.StoreServices;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class MeaningPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public MeaningPAO(final TaskManager taskManager) {
		Assertion.check().isNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetDictionaryExportByBotId.
	 * @param botId Long
	 * @return DtList de DictionaryExport res
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetDictionaryExportByBotId",
			request = "select   " + 
 "             	mea.label as meaning_label,  " + 
 "             	STRING_AGG (syn.label, '|') as synonyms_list " + 
 " 				from meaning mea" + 
 " 				join synonym syn on syn.mea_id = mea.mea_id  " + 
 " 			" + 
 " 				where mea.bot_id = #botId#" + 
 " 				group by mea.label",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtDictionaryExport")
	public io.vertigo.datamodel.structure.model.DtList<io.vertigo.chatbot.designer.domain.DictionaryExport> getDictionaryExportByBotId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId) {
		final Task task = createTaskBuilder("TkGetDictionaryExportByBotId")
				.addValue("botId", botId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetTuplesSynonym.
	 * @param botId Long
	 * @param words List de String
	 * @return DtList de TupleSynonymIhm tupleSynonymIhm
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetTuplesSynonym",
			request = "SELECT word.label as word, syn.label as synonym_label" + 
 "				from meaning mea " + 
 "				join synonym word on word.mea_id = mea.mea_id			" + 
 "				join synonym syn on syn.mea_id = mea.mea_id	" + 
 "				where 1=1" + 
 "				and syn.syn_id != word.syn_id" + 
 "				and word.label in (#words.rownum#)" + 
 "				and mea.bot_id = #botId#	" + 
 "				GROUP BY syn.label, word.label",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtTupleSynonymIhm")
	public io.vertigo.datamodel.structure.model.DtList<io.vertigo.chatbot.designer.domain.TupleSynonymIhm> getTuplesSynonym(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId, @io.vertigo.datamodel.task.proxy.TaskInput(name = "words", smartType = "STyLabel") final java.util.List<String> words) {
		final Task task = createTaskBuilder("TkGetTuplesSynonym")
				.addValue("botId", botId)
				.addValue("words", words)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
