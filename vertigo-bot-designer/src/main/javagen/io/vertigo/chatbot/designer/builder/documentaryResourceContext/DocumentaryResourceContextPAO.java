package io.vertigo.chatbot.designer.builder.documentaryResourceContext;

import javax.inject.Inject;

import io.vertigo.core.node.Node;
import io.vertigo.core.lang.Assertion;
import io.vertigo.core.lang.Generated;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.impl.dao.StoreServices;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class DocumentaryResourceContextPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public DocumentaryResourceContextPAO(final TaskManager taskManager) {
		Assertion.check().isNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkGetAllDocumentaryResourceContextIhmByDreId.
	 * @param dreId Long
	 * @return DtList de DocumentaryResourceContextIhm documentaryResourceContexts
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetAllDocumentaryResourceContextIhmByDreId",
			request = "SELECT 	drc.drc_id,\n" + 
 " 			        drc.dre_id,\n" + 
 " 					cva.cva_id,\n" + 
 " 					cpv.cpv_id,\n" + 
 " 					cva.label as cva_label,\n" + 
 " 					cpv.value as cpv_value\n" + 
 " 			from documentary_resource_context drc\n" + 
 " 			join context_value cva on (cva.cva_id = drc.cva_id)\n" + 
 " 			left join context_possible_value cpv on (cpv.cpv_id = drc.cpv_id)\n" + 
 " 			where drc.dre_id = #dreId#\n" + 
 " 			order by cva.label",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtDocumentaryResourceContextIhm", name = "documentaryResourceContexts")
	public io.vertigo.datamodel.structure.model.DtList<io.vertigo.chatbot.designer.domain.DocumentaryResourceContextIhm> getAllDocumentaryResourceContextIhmByDreId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "dreId", smartType = "STyId") final Long dreId) {
		final Task task = createTaskBuilder("TkGetAllDocumentaryResourceContextIhmByDreId")
				.addValue("dreId", dreId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkRemoveAllDocumentaryResourceContextByCvaId.
	 * @param cvaId Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkRemoveAllDocumentaryResourceContextByCvaId",
			request = "delete from documentary_resource_context\n" + 
 " 			where cva_id = #cvaId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void removeAllDocumentaryResourceContextByCvaId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "cvaId", smartType = "STyId") final Long cvaId) {
		final Task task = createTaskBuilder("TkRemoveAllDocumentaryResourceContextByCvaId")
				.addValue("cvaId", cvaId)
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TkRemoveAllDocumentaryResourceContextByDreId.
	 * @param dreId Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkRemoveAllDocumentaryResourceContextByDreId",
			request = "delete from documentary_resource_context\n" + 
 " 			where dre_id = #dreId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void removeAllDocumentaryResourceContextByDreId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "dreId", smartType = "STyId") final Long dreId) {
		final Task task = createTaskBuilder("TkRemoveAllDocumentaryResourceContextByDreId")
				.addValue("dreId", dreId)
				.build();
		getTaskManager().execute(task);
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
