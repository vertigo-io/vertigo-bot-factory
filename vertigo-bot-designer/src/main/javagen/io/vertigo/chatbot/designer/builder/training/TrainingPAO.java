package io.vertigo.chatbot.designer.builder.training;

import javax.inject.Inject;

import io.vertigo.core.node.Node;
import io.vertigo.core.lang.Assertion;
import io.vertigo.core.lang.Generated;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.impl.dao.StoreServices;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class TrainingPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public TrainingPAO(final TaskManager taskManager) {
		Assertion.check().isNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkCleanOldTrainings.
	 * @param botId Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkCleanOldTrainings",
			request = "update training\n" + 
 " 			set str_cd = 'KO',\n" + 
 " 			log = CONCAT(log,' KO<br>The training was stopped.')\n" + 
 " 			where str_cd = 'TRAINING'\n" + 
 " 			and bot_id = #botId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void cleanOldTrainings(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId) {
		final Task task = createTaskBuilder("TkCleanOldTrainings")
				.addValue("botId", botId)
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TkGetAllTrainingFilIdsByBotId.
	 * @param botId Long
	 * @return List de Long filIds
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetAllTrainingFilIdsByBotId",
			request = "select mdi.fil_id\n" + 
 "             from media_file_info mdi\n" + 
 "             join training tr on (mdi.fil_id = tr.fil_id_model)\n" + 
 "             where tr.bot_id = #botId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyId")
	public java.util.List<Long> getAllTrainingFilIdsByBotId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId) {
		final Task task = createTaskBuilder("TkGetAllTrainingFilIdsByBotId")
				.addValue("botId", botId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkGetNextModelNumber.
	 * @param botId Long
	 * @return Long nextModelNumber
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkGetNextModelNumber",
			request = "select coalesce(max(version_number) + 1, 1)\n" + 
 " 			from training tra\n" + 
 " 			where bot_id = #botId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyNumber")
	public Long getNextModelNumber(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyId") final Long botId) {
		final Task task = createTaskBuilder("TkGetNextModelNumber")
				.addValue("botId", botId)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TkRemoveTrainingByBotId.
	 * @param botId Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkRemoveTrainingByBotId",
			request = "delete from training\n" + 
 " 			where bot_id = #botId#",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void removeTrainingByBotId(@io.vertigo.datamodel.task.proxy.TaskInput(name = "botId", smartType = "STyNumber") final Long botId) {
		final Task task = createTaskBuilder("TkRemoveTrainingByBotId")
				.addValue("botId", botId)
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TkRemoveTrainingFileByFilIds.
	 * @param filIds List de Long
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkRemoveTrainingFileByFilIds",
			request = "delete from media_file_info mfi\n" + 
 " 			where mfi.fil_id in (#filIds.rownum#)",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProc.class)
	public void removeTrainingFileByFilIds(@io.vertigo.datamodel.task.proxy.TaskInput(name = "filIds", smartType = "STyId") final java.util.List<Long> filIds) {
		final Task task = createTaskBuilder("TkRemoveTrainingFileByFilIds")
				.addValue("filIds", filIds)
				.build();
		getTaskManager().execute(task);
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
